from django import forms
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User
from .models import Post, Category, Tag, InviteCode, Profile, Comment, Story
from django.template.defaultfilters import slugify
import uuid

class PostForm(forms.ModelForm):
    content = forms.CharField(
        widget=forms.Textarea(attrs={'id': 'editor'}),
        required=True
    )
    
    title = forms.CharField(
        widget=forms.TextInput(attrs={
            'class': 'w-full px-6 py-4 bg-[#1a1625] border border-purple-500/20 rounded-xl text-white focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 focus:outline-none transition-all duration-300 hover:border-purple-500/40',
            'placeholder': '‚ú® –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞',
        })
    )
    
    category = forms.ModelChoiceField(
        queryset=Category.objects.all().order_by('name'),
        required=True,
        empty_label="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
        widget=forms.Select(attrs={
            'class': 'w-full px-6 py-4 bg-[#1a1625] border border-purple-500/20 rounded-xl text-white focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 focus:outline-none transition-all duration-300 hover:border-purple-500/40',
        })
    )
    
    tags = forms.ModelMultipleChoiceField(
        queryset=Tag.objects.all().order_by('name'),
        required=False,
        widget=forms.SelectMultiple(attrs={
            'class': 'w-full px-6 py-4 bg-[#1a1625] border border-purple-500/20 rounded-xl text-white focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 focus:outline-none transition-all duration-300 hover:border-purple-500/40',
            'size': '5',
        })
    )
    
    thumbnail = forms.ImageField(
        required=False,
        widget=forms.FileInput(attrs={
            'class': 'hidden',
            'id': 'thumbnail-upload',
            'accept': 'image/*',
        })
    )
    
    is_published = forms.BooleanField(
        required=False,
        initial=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-checkbox h-5 w-5 text-purple-500 rounded border-purple-500/20 focus:ring-purple-500/20 focus:ring-2 transition-all duration-300',
        })
    )
    
    class Meta:
        model = Post
        fields = ['title', 'content', 'category', 'tags', 'thumbnail', 'is_published']
        widgets = {
            'category': forms.Select(attrs={
                'class': 'w-full px-4 py-3 bg-surface/50 border border-white/10 rounded-lg text-white'
            }),
            'tags': forms.SelectMultiple(attrs={
                'class': 'w-full px-4 py-3 bg-surface/50 border border-white/10 rounded-lg text-white'
            }),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–µ–≥–∏ –∑–∞—Ä–∞–Ω–µ–µ
        self.fields['category'].queryset = Category.objects.all().order_by('name')
        self.fields['tags'].queryset = Tag.objects.all().order_by('name')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø–æ–ª–µ–π
        self.fields['title'].help_text = '–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞'
        self.fields['category'].help_text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é'
        self.fields['tags'].help_text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏ –¥–ª—è –ª—É—á—à–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (Ctrl+Click –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞)'
        self.fields['thumbnail'].help_text = '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 1200x630px'
        self.fields['is_published'].help_text = '–û—Ç–º–µ—Ç—å—Ç–µ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–µ–≥–æ–≤
        if not self.fields['category'].queryset.exists():
            self.fields['category'].help_text = '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
        
        if not self.fields['tags'].queryset.exists():
            self.fields['tags'].help_text = '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–≥–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'

    def clean(self):
        cleaned_data = super().clean()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not cleaned_data.get('title'):
            self.add_error('title', '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.')
        
        if not cleaned_data.get('content'):
            self.add_error('content', '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.')
        
        if not cleaned_data.get('category'):
            self.add_error('category', '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.')
        
        return cleaned_data

    def clean_thumbnail(self):
        thumbnail = self.cleaned_data.get('thumbnail')
        if thumbnail:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if thumbnail.size > 10 * 1024 * 1024:  # 10MB
                raise forms.ValidationError('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º MIME-—Ç–∏–ø —Ñ–∞–π–ª–∞
            allowed_types = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif']
            if not hasattr(thumbnail, 'content_type') or thumbnail.content_type not in allowed_types:
                raise forms.ValidationError('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç—ã JPG, PNG –∏ GIF')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            try:
                from PIL import Image
                img = Image.open(thumbnail)
                img.verify()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ –ø–æ—Å–ª–µ verify()
                thumbnail.seek(0)
                img = Image.open(thumbnail)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –Ω–µ-GIF –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                if thumbnail.content_type != 'image/gif':
                    width, height = img.size
                    max_dimension = 5000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç–æ—Ä–æ–Ω—ã
                    if width > max_dimension or height > max_dimension:
                        raise forms.ValidationError(f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - {max_dimension}x{max_dimension} –ø–∏–∫—Å–µ–ª–µ–π')
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å —Ñ–∞–π–ª–∞ –≤ –Ω–∞—á–∞–ª–æ
                thumbnail.seek(0)
            except Exception as e:
                raise forms.ValidationError(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}')
            
        return thumbnail

class ProfileForm(forms.ModelForm):
    class Meta:
        model = Profile
        fields = ['bio', 'location', 'website', 'occupation', 'avatar', 'cover']
        widgets = {
            'bio': forms.Textarea(attrs={
                'class': 'w-full px-4 py-3 bg-surface/50 border border-white/10 rounded-lg text-white placeholder-gray-500',
                'rows': 4,
                'placeholder': '‚úçÔ∏è –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ...'
            }),
            'location': forms.TextInput(attrs={
                'class': 'w-full px-4 py-3 bg-surface/50 border border-white/10 rounded-lg text-white placeholder-gray-500',
                'placeholder': 'üìç –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'
            }),
            'website': forms.URLInput(attrs={
                'class': 'w-full px-4 py-3 bg-surface/50 border border-white/10 rounded-lg text-white placeholder-gray-500',
                'placeholder': 'üåê –í–∞—à –≤–µ–±-—Å–∞–π—Ç'
            }),
            'occupation': forms.TextInput(attrs={
                'class': 'w-full px-4 py-3 bg-surface/50 border border-white/10 rounded-lg text-white placeholder-gray-500',
                'placeholder': 'üíº –†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
            }),
            'avatar': forms.FileInput(attrs={
                'class': 'hidden',
                'accept': 'image/*'
            }),
            'cover': forms.FileInput(attrs={
                'class': 'hidden',
                'accept': 'image/*',
                'id': 'id_cover'
            })
        }

    def clean_cover(self):
        cover = self.cleaned_data.get('cover')
        if cover and not isinstance(cover, str):
            if hasattr(cover, 'size'):
                if cover.size > 10 * 1024 * 1024:
                    raise forms.ValidationError('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB')
            if hasattr(cover, 'content_type'):
                if not cover.content_type.startswith('image/'):
                    raise forms.ValidationError('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º')
        return cover

    def clean_avatar(self):
        avatar = self.cleaned_data.get('avatar')
        if avatar and not isinstance(avatar, str):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            if hasattr(avatar, 'size'):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
                if avatar.size > 5 * 1024 * 1024:  # 5MB
                    raise forms.ValidationError('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB')
            if hasattr(avatar, 'content_type'):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
                if not avatar.content_type.startswith('image/'):
                    raise forms.ValidationError('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º')
        return avatar

class CustomUserCreationForm(UserCreationForm):
    username = forms.CharField(
        widget=forms.TextInput(attrs={
            'class': 'w-full px-6 py-4 bg-surface-700/30 border border-purple-500/20 rounded-xl text-white focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 focus:outline-none transition-all duration-300 hover:border-purple-500/40',
            'placeholder': 'üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        })
    )
    
    password1 = forms.CharField(
        widget=forms.PasswordInput(attrs={
            'class': 'w-full px-6 py-4 bg-surface-700/30 border border-purple-500/20 rounded-xl text-white focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 focus:outline-none transition-all duration-300 hover:border-purple-500/40',
            'placeholder': 'üîí –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å'
        })
    )
    
    password2 = forms.CharField(
        widget=forms.PasswordInput(attrs={
            'class': 'w-full px-6 py-4 bg-surface-700/30 border border-purple-500/20 rounded-xl text-white focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 focus:outline-none transition-all duration-300 hover:border-purple-500/40',
            'placeholder': 'üîí –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å'
        })
    )
    
    invite_code = forms.CharField(
        max_length=8,
        required=True,
        widget=forms.TextInput(attrs={
            'class': 'w-full px-6 py-4 bg-surface-700/30 border border-purple-500/20 rounded-xl text-white focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 focus:outline-none transition-all duration-300 hover:border-purple-500/40 uppercase',
            'placeholder': 'üéüÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥'
        })
    )

    class Meta:
        model = User
        fields = ('username', 'password1', 'password2', 'invite_code')

    def clean_invite_code(self):
        code = self.cleaned_data.get('invite_code')
        try:
            invite = InviteCode.objects.get(code=code, is_active=True)
            if invite.used_by:
                raise forms.ValidationError('–≠—Ç–æ—Ç –∏–Ω–≤–∞–π—Ç-–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω')
            return code
        except InviteCode.DoesNotExist:
            raise forms.ValidationError('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω–≤–∞–π—Ç-–∫–æ–¥')

    def save(self, commit=True):
        user = super().save(commit=False)
        if commit:
            user.save()
            invite = InviteCode.objects.get(code=self.cleaned_data['invite_code'])
            invite.use(user)
        return user

class ProfileUpdateForm(forms.ModelForm):
    username = forms.CharField(
        max_length=150,
        required=True,
        widget=forms.TextInput(attrs={
            'class': 'w-full px-6 py-4 bg-[#1a1625] border border-purple-500/20 rounded-xl text-white focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 focus:outline-none transition-all duration-300 hover:border-purple-500/40',
            'placeholder': '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º'
        })
    )

    avatar = forms.ImageField(
        required=False,
        widget=forms.FileInput(attrs={
            'class': 'hidden',
            'id': 'avatar-upload',
            'accept': 'image/*'
        })
    )
    
    bio = forms.CharField(
        required=False,
        widget=forms.Textarea(attrs={
            'class': 'w-full px-6 py-4 bg-surface-700/30 border border-purple-500/20 rounded-xl text-white focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 focus:outline-none transition-all duration-300 hover:border-purple-500/40',
            'placeholder': '‚úçÔ∏è –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ...',
            'rows': 4
        })
    )
    
    location = forms.CharField(
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'w-full px-6 py-4 bg-surface-700/30 border border-purple-500/20 rounded-xl text-white focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 focus:outline-none transition-all duration-300 hover:border-purple-500/40',
            'placeholder': 'üìç –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'
        })
    )
    
    occupation = forms.CharField(
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'w-full px-6 py-4 bg-surface-700/30 border border-purple-500/20 rounded-xl text-white focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 focus:outline-none transition-all duration-300 hover:border-purple-500/40',
            'placeholder': 'üíº –í–∞—à–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –∏–ª–∏ —Ä–æ–¥ –∑–∞–Ω—è—Ç–∏–π'
        })
    )
    
    class Meta:
        model = Profile
        fields = ['username', 'avatar', 'cover', 'bio', 'location', 'occupation', 'website']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        if self.instance and self.instance.user:
            self.fields['username'].initial = self.instance.user.username

    def clean_username(self):
        username = self.cleaned_data['username']
        if User.objects.exclude(pk=self.instance.user.pk).filter(username=username).exists():
            raise forms.ValidationError('–≠—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç')
        return username

class CommentForm(forms.ModelForm):
    content = forms.CharField(
        widget=forms.Textarea(attrs={
            'class': 'w-full px-6 py-4 bg-surface-700/30 border border-purple-500/20 rounded-xl text-white focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 focus:outline-none transition-all duration-300 hover:border-purple-500/40',
            'placeholder': '‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...',
            'rows': 3
        }),
        required=True
    )

    class Meta:
        model = Comment
        fields = ['content']

    def clean_content(self):
        content = self.cleaned_data.get('content', '').strip()
        if not content:
            raise forms.ValidationError('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
        if len(content) > 1000:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            raise forms.ValidationError('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)')
        return content

    def save(self, commit=True):
        comment = super().save(commit=False)
        if commit:
            comment.save()
        return comment

class StoryForm(forms.ModelForm):
    tags = forms.CharField(
        required=False, 
        widget=forms.TextInput(attrs={
            'class': 'w-full px-6 py-4 bg-surface-700/30 border border-purple-500/20 rounded-xl text-white focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 focus:outline-none transition-all duration-300 hover:border-purple-500/40',
            'placeholder': '‚ú® –í–≤–µ–¥–∏—Ç–µ —Ö–µ—à—Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é'
        })
    )
    
    class Meta:
        model = Story
        fields = ['cover', 'title', 'chapters_count', 'tags', 'description', 'link_title', 'link_url']
        widgets = {
            'title': forms.TextInput(attrs={
                'class': 'w-full px-6 py-4 bg-surface-700/30 border border-purple-500/20 rounded-xl text-white focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 focus:outline-none transition-all duration-300 hover:border-purple-500/40',
                'placeholder': '‚ú® –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏'
            }),
            'chapters_count': forms.NumberInput(attrs={
                'class': 'w-full px-6 py-4 bg-surface-700/30 border border-purple-500/20 rounded-xl text-white focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 focus:outline-none transition-all duration-300 hover:border-purple-500/40',
                'placeholder': 'üìö –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞–≤',
                'min': '0',
                'style': 'color: white; background-color: rgba(26, 22, 37, 0.3);'
            }),
            'description': forms.Textarea(attrs={
                'class': 'w-full px-6 py-4 bg-surface-700/30 border border-purple-500/20 rounded-xl text-white focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 focus:outline-none transition-all duration-300 hover:border-purple-500/40',
                'placeholder': '‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é...',
                'rows': '6'
            }),
            'link_title': forms.TextInput(attrs={
                'class': 'w-full px-6 py-4 bg-surface-700/30 border border-purple-500/20 rounded-xl text-white focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 focus:outline-none transition-all duration-300 hover:border-purple-500/40',
                'placeholder': 'üîñ –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏'
            }),
            'link_url': forms.URLInput(attrs={
                'class': 'w-full px-6 py-4 bg-surface-700/30 border border-purple-500/20 rounded-xl text-white focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 focus:outline-none transition-all duration-300 hover:border-purple-500/40',
                'placeholder': 'üîó https://example.com'
            }),
            'cover': forms.FileInput(attrs={
                'class': 'hidden',
                'accept': 'image/*'
            })
        }
    
    def clean_tags(self):
        tags_str = self.cleaned_data.get('tags', '')
        if not tags_str:
            return []
        tag_names = [tag.strip() for tag in tags_str.split(',') if tag.strip()]
        tags = []
        for tag_name in tag_names:
            if not tag_name:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Ç–µ–≥–∏
                continue
            try:
                tag = Tag.objects.get(name=tag_name)
            except Tag.DoesNotExist:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π slug
                slug = slugify(tag_name)
                if not slug:  # –ï—Å–ª–∏ slugify –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
                    slug = f"tag-{uuid.uuid4().hex[:8]}"
                counter = 1
                original_slug = slug
                while Tag.objects.filter(slug=slug).exists():
                    slug = f"{original_slug}-{counter}"
                    counter += 1
                tag = Tag.objects.create(name=tag_name, slug=slug)
            tags.append(tag)
        return tags
    
    def save(self, commit=True):
        story = super().save(commit=False)
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        alt_titles = []
        for key, value in self.data.items():
            if key.startswith('alt_title_') and value.strip():
                alt_titles.append(value.strip())
        story.alt_titles = alt_titles
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        additional_links = []
        for key, value in self.data.items():
            if key.startswith('link_title_'):
                link_id = key.split('_')[-1]
                url_key = f'link_url_{link_id}'
                if url_key in self.data and self.data[url_key].strip() and value.strip():
                    additional_links.append({
                        'title': value.strip(),
                        'url': self.data[url_key].strip()
                    })
        story.additional_links = additional_links
        
        if commit:
            story.save()
            story.tags.clear()
            story.tags.add(*self.cleaned_data['tags'])
        return story