from django import forms
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User
from .models import Post, Category, Tag, InviteCode, Profile

class PostForm(forms.ModelForm):
    content = forms.CharField(
        widget=forms.Textarea(attrs={
            'id': 'content-editor',
            'class': 'tinymce',
            'style': 'min-height: 400px;'
        }),
        required=False,
    )
    
    title = forms.CharField(
        widget=forms.TextInput(attrs={
            'class': 'w-full px-6 py-4 bg-[#1a1625] border border-purple-500/20 rounded-xl text-white focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 focus:outline-none transition-all duration-300 hover:border-purple-500/40',
            'placeholder': '‚ú® –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞',
        })
    )
    
    category = forms.ModelChoiceField(
        queryset=Category.objects.all(),
        widget=forms.Select(attrs={
            'class': 'w-full px-6 py-4 bg-[#1a1625] border border-purple-500/20 rounded-xl text-white focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 focus:outline-none transition-all duration-300 hover:border-purple-500/40',
        })
    )
    
    tags = forms.ModelMultipleChoiceField(
        queryset=Tag.objects.all(),
        required=False,
        widget=forms.SelectMultiple(attrs={
            'class': 'w-full px-6 py-4 bg-[#1a1625] border border-purple-500/20 rounded-xl text-white focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 focus:outline-none transition-all duration-300 hover:border-purple-500/40',
        })
    )
    
    thumbnail = forms.ImageField(
        required=False,
        widget=forms.FileInput(attrs={
            'class': 'hidden',
            'id': 'thumbnail-upload',
            'accept': 'image/*',
        })
    )
    
    is_published = forms.BooleanField(
        required=False,
        initial=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-checkbox h-5 w-5 text-purple-500 rounded border-purple-500/20 focus:ring-purple-500/20 focus:ring-2 transition-all duration-300',
        })
    )
    
    class Meta:
        model = Post
        fields = ['title', 'content', 'category', 'tags', 'thumbnail', 'is_published']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['is_published'].initial = True
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø–æ–ª–µ–π
        self.fields['title'].help_text = '–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞'
        self.fields['category'].help_text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é'
        self.fields['tags'].help_text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–≥–æ–≤ –¥–ª—è –ª—É—á—à–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (Ctrl+Click –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞)'
        self.fields['thumbnail'].help_text = '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 1200x630px'
        self.fields['is_published'].help_text = '–û—Ç–º–µ—Ç—å—Ç–µ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.fields['category'].queryset = Category.objects.only('id', 'name')

    def clean_title(self):
        title = self.cleaned_data.get('title')
        if not title:
            raise forms.ValidationError('–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.')
        return title

    def clean_content(self):
        content = self.cleaned_data.get('content', '').strip()
        return content

    def clean_category(self):
        category = self.cleaned_data.get('category')
        if not category:
            raise forms.ValidationError('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.')
        return category

    def clean(self):
        cleaned_data = super().clean()
        return cleaned_data

class CustomUserCreationForm(UserCreationForm):
    username = forms.CharField(
        widget=forms.TextInput(attrs={
            'class': 'w-full px-6 py-4 bg-surface-700/30 border border-purple-500/20 rounded-xl text-white focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 focus:outline-none transition-all duration-300 hover:border-purple-500/40',
            'placeholder': 'üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        })
    )
    
    password1 = forms.CharField(
        widget=forms.PasswordInput(attrs={
            'class': 'w-full px-6 py-4 bg-surface-700/30 border border-purple-500/20 rounded-xl text-white focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 focus:outline-none transition-all duration-300 hover:border-purple-500/40',
            'placeholder': 'üîí –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å'
        })
    )
    
    password2 = forms.CharField(
        widget=forms.PasswordInput(attrs={
            'class': 'w-full px-6 py-4 bg-surface-700/30 border border-purple-500/20 rounded-xl text-white focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 focus:outline-none transition-all duration-300 hover:border-purple-500/40',
            'placeholder': 'üîí –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å'
        })
    )
    
    invite_code = forms.CharField(
        max_length=8,
        required=True,
        widget=forms.TextInput(attrs={
            'class': 'w-full px-6 py-4 bg-surface-700/30 border border-purple-500/20 rounded-xl text-white focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 focus:outline-none transition-all duration-300 hover:border-purple-500/40 uppercase',
            'placeholder': 'üéüÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥'
        })
    )

    class Meta:
        model = User
        fields = ('username', 'password1', 'password2', 'invite_code')

    def clean_invite_code(self):
        code = self.cleaned_data.get('invite_code')
        try:
            invite = InviteCode.objects.get(code=code, is_active=True)
            if invite.used_by:
                raise forms.ValidationError('–≠—Ç–æ—Ç –∏–Ω–≤–∞–π—Ç-–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω')
            return code
        except InviteCode.DoesNotExist:
            raise forms.ValidationError('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω–≤–∞–π—Ç-–∫–æ–¥')

    def save(self, commit=True):
        user = super().save(commit=False)
        if commit:
            user.save()
            invite = InviteCode.objects.get(code=self.cleaned_data['invite_code'])
            invite.use(user)
        return user

class ProfileUpdateForm(forms.ModelForm):
    avatar = forms.ImageField(
        required=False,
        widget=forms.FileInput(attrs={
            'class': 'hidden',
            'id': 'avatar-upload',
            'accept': 'image/*'
        })
    )
    
    bio = forms.CharField(
        required=False,
        widget=forms.Textarea(attrs={
            'class': 'w-full px-6 py-4 bg-surface-700/30 border border-purple-500/20 rounded-xl text-white focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 focus:outline-none transition-all duration-300 hover:border-purple-500/40',
            'placeholder': '‚úçÔ∏è –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ...',
            'rows': 4
        })
    )
    
    location = forms.CharField(
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'w-full px-6 py-4 bg-surface-700/30 border border-purple-500/20 rounded-xl text-white focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 focus:outline-none transition-all duration-300 hover:border-purple-500/40',
            'placeholder': 'üìç –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'
        })
    )
    
    occupation = forms.CharField(
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'w-full px-6 py-4 bg-surface-700/30 border border-purple-500/20 rounded-xl text-white focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 focus:outline-none transition-all duration-300 hover:border-purple-500/40',
            'placeholder': 'üíº –í–∞—à–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –∏–ª–∏ —Ä–æ–¥ –∑–∞–Ω—è—Ç–∏–π'
        })
    )
    
    class Meta:
        model = Profile
        fields = ['avatar', 'bio', 'location', 'occupation']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø–æ–ª–µ–π
        self.fields['avatar'].help_text = '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 400x400px'
        self.fields['bio'].help_text = '–ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤'
        self.fields['location'].help_text = '–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è'
        self.fields['occupation'].help_text = '–ù–∞–ø—Ä–∏–º–µ—Ä: Web Developer'